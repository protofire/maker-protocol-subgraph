type SystemDebt @entity {
  id: ID!
  owner: User
  amount: BigDecimal!
}

" Collateral auctions are used to sell collateral from Vaults that have become undercollateralized "
type CollateralAuction @entity {
  id: ID!

  " Collateral type "
  collateral: CollateralType!

  # TODO
}

" Collateral tokens (Gem)"
type Collateral @entity {
  " Collateral tokens (Gem) : ${user.id}-${collateralType.id} "
  id: ID!

  " Collateral type "
  type: CollateralType!

  " Account that owns this Collateral "
  owner: User!

  " Amount of collateral "
  amount: BigDecimal!

  " Timestamp of the block in which this collateral was created [seconds] "
  createdAt: BigInt

  " Block number in which this collateral was created "
  createdAtBlock: BigInt

  " Transaction hash in which this collateral was created "
  createdAtTransaction: Bytes

  " Timestamp of the block in which this collateral was last modified [seconds] "
  modifiedAt: BigInt

  " Block number in which this collateral was last modified "
  modifiedAtBlock: BigInt

  " Transaction hash in which this collateral was last modified "
  modifiedAtTransaction: Bytes

  " UserCollateral action history "
  logs: [CollateralLog!] @derivedFrom(field: "collateral")
}

" Particular collateral type registered in the system (Ilk) "
type CollateralType @entity {
  " Collateral type name "
  id: ID!

  #
  # Debt
  #

  " Debt ceiling [DAI] (line) "
  debtCeiling: BigDecimal!

  " Debt backed by this collateral type [DAI] (Art)"
  debtNormalized: BigDecimal!

  " Asset/DAI exchange rate (rate) "
  rate: BigDecimal!

  " Total assets locked as collateral"
  totalCollateral: BigDecimal!

  " Total debt backed by this collateral type [DAI] (Ilk.Art * rate)"
  totalDebt: BigDecimal!

  #
  # Liquidation parameters
  #

  " Maximum size of collateral that can be auctioned at once (lump) "
  liquidationLotSize: BigDecimal!

  " Liquidation penalty (chop [wad]) "
  liquidationPenalty: BigDecimal!

  " Min collateralization ratio "
  liquidationRatio: BigDecimal!

  # TODO check Dog and Vat Ilk definitions
  # TODO : clip;  // Liquidator
  # TODO : clip;  // Liquidator
  # TODO: uint256 hole;  // Max DAI needed to cover debt+fees of active auctions per ilk [rad]

  " Amt DAI needed to cover debt+fees of active auctions per ilk [rad] "
  daiAmountToCoverDebtAndFees: BigDecimal!

  #
  # Collateral auctions
  #

  " Collateral auctions for this collateral type "
  auctions: [CollateralAuction!] @derivedFrom(field: "collateral")

  " Number of collateral auctions started for this collateral type "
  auctionCount: BigInt!

  " Maximum auction duration [seconds] "
  auctionDuration: BigInt!

  " Max bid duration in a collateral auction [seconds] "
  bidDuration: BigInt!

  " Minimum bid increase in a collateral auction "
  minimumBidIncrease: BigDecimal!

  #
  # Stability rates
  #

  " Stability fee rate per second "
  stabilityFee: BigDecimal!
  stabilityFeeUpdatedAt: BigInt!
  #
  # Vaults
  #

  " Collateral auctions for this collateral type "
  vaults: [Vault!] @derivedFrom(field: "collateralType")

  " Min debt per vault [DAI] (dust) "
  vaultDebtFloor: BigDecimal!

  " Number of vaults opened through the manager (CdpManager) "
  vaultCount: BigInt!

  " Number of vaults NOT opened through the manager (CdpManager) "
  unmanagedVaultCount: BigInt!

  #
  # Asset price
  #

  " Current market price [USD] "
  price: CollateralPrice

  " Price history "
  prices: [CollateralPrice!] @derivedFrom(field: "collateral")

  #
  # Status fields
  #

  " Timestamp of the block in which this collateral type was added [seconds] "
  addedAt: BigInt!

  " Block number in which this collateral type was added "
  addedAtBlock: BigInt!

  " Transaction hash in which this collateral type was added "
  addedAtTransaction: Bytes!

  " Timestamp of the block in which this collateral type was last modified [seconds] "
  modifiedAt: BigInt

  " Block number in which this collateral type was last modified "
  modifiedAtBlock: BigInt

  " Transaction hash in which this collateral type was last modified "
  modifiedAtTransaction: Bytes
}

" Collateral market price at a given block "
type CollateralPrice @entity {
  " Equals to: <block_number>-<ilk>"
  id: ID!

  " Block number "
  block: BigInt!

  " Collateral type "
  collateral: CollateralType!

  " Market price with safety margin (current price less liquidation ratio) [USD] (spot) "
  spotPrice: BigDecimal!

  " Timestamp in seconds "
  timestamp: BigInt!

  " Price value "
  value: BigDecimal!
}

" Vault owner "
type User @entity {
  " Equals to account address "
  id: ID!

  " Account address "
  address: Bytes!

  " User's DAI in the Vault"
  totalVaultDai: BigDecimal!

  " User's Total Erc20.DAI "
  totalDaiBalance: BigDecimal!

  " The user savings in DAI (Pot#pie) "
  savings: BigDecimal!

  " Total maker balance "
  totalMkrBalance: BigDecimal!

  " Number of user proxies associated to the user "
  proxyCount: BigInt!

  " Number of vaults opened by the user "
  vaultCount: BigInt!

  " User proxies. Up to one per collateral type "
  proxies: [UserProxy!] @derivedFrom(field: "owner")

  " User's vaults "
  vaults: [Vault!] @derivedFrom(field: "owner")

  " User's collaterals "
  collaterals: [Collateral!] @derivedFrom(field: "owner")

  " User's Outgoing Transfers for DAI "
  daiOutgoingTransfers: [DaiTransfer!] @derivedFrom(field: "src")

  " User's Incoming Transfers for DAI "
  daiIncomingTransfers: [DaiTransfer!] @derivedFrom(field: "dst")

  " User's dai approvals "
  daiApprovals: [DaiApproval!] @derivedFrom(field: "owner")
  " User's mkr outgoing transfers "
  mkrOutgoingTransfers: [MkrTransfer!] @derivedFrom(field: "src")

  " User's mkr incoming transfers "
  mkrIncomingTransfers: [MkrTransfer!] @derivedFrom(field: "dst")

  " User's mkr approvals "
  mkrApprovals: [MkrApproval!] @derivedFrom(field: "owner")
}

" Contract used to execute transactions and sequences of transactions on behalf of a user "
type UserProxy @entity {
  " Proxy address "
  id: ID!

  " Proxy contract address "
  address: Bytes!

  " Cache contract address "
  cache: Bytes!

  " User reference "
  owner: User!
}

" Provide information about the current system state and parameters "
type SystemState @entity {
  " Singleton entity. Equals to 'current' "
  id: ID!

  #
  # General protocol stats
  #

  " Total mkr issued [MKR] DSToken._supply"
  totalMkr: BigDecimal!

  " Total debt issued [DAI] (Vat.debt)"
  totalDebt: BigDecimal!

  "Total unbacked debt DAI (Vat.vice)"
  totalSystemDebt: BigDecimal!

  systemDebt: [SystemDebt!] # TODO relate sins with system state
  systemDebtInQueue: BigDecimal!

  #
  # About number of entities registered system-wide
  #

  " Number of collateral types registered "
  collateralCount: BigInt!

  " Number of collateral auctions started "
  collateralAuctionCount: BigInt!

  " Number of user proxies created "
  userProxyCount: BigInt!

  " Number of vaults NOT opened through the manager (CdpManager) "
  unmanagedVaultCount: BigInt!

  " Number of vaults opened through the manager (CdpManager) "
  vaultCount: BigInt!

  #
  # General system parameters
  #

  " Base rate for stability fee per second "
  baseStabilityFee: BigDecimal!

  " Dai Savings Rate "
  savingsRate: BigDecimal!

  " Total Debt Ceiling "
  totalDebtCeiling: BigDecimal!

  #
  # Balance Sheet paramters (vow)
  #

  " Address that conforms to a FlapLike interface "
  vowFlapperContract: Bytes!

  " Address that conforms to a Floplike interface "
  vowFlopperContract: Bytes!

  #
  # Debt auction parameters (flop)
  #

  " Max bid duration / single bid lifetime [seconds] "
  debtAuctionBidDuration: BigInt

  " The fixed debt quantity to be covered by any one debt auction [DAI] "
  debtAuctionBidSize: BigDecimal

  " Debt auction delay [seconds] "
  debtAuctionDelay: BigInt

  " Maximum auction duration [seconds] "
  debtAuctionDuration: BigInt

  " The starting amount of MKR offered to cover the lot [MKR] "
  debtAuctionInitialLotSize: BigDecimal

  " Lot size increase "
  debtAuctionLotSizeIncrease: BigDecimal

  " Minimum bid increase "
  debtAuctionMinimumBidIncrease: BigDecimal

  " Vow#Ash the total amount of on-auction debt."
  debtOnAuctionTotalAmount: BigDecimal

  #
  # Surplus auction parameters (flap)
  #

  " Max bid duration / bid lifetime [seconds] "
  surplusAuctionBidDuration: BigInt

  " Surplus buffer, must be exceeded before surplus auctions are possible [DAI] "
  surplusAuctionBuffer: BigDecimal

  " Maximum auction duration [seconds] "
  surplusAuctionDuration: BigInt

  " The fixed surplus quantity to be sold by any one surplus auction [DAI] "
  surplusAuctionLotSize: BigDecimal

  " Minimum bid increase "
  surplusAuctionMinimumBidIncrease: BigDecimal

  #
  # Accumulation of Stability Fees for Collateral Types (jug)
  #

  " Address of the vow contract modify by Jug Contract"
  jugVowContract: Bytes!

  #
  # The Dai Savings Rate (pot)
  #

  " Dai Savings Rate Live"
  dsrLive: Boolean!

  " Dai Savings Rate Live LastUpdate"
  dsrLiveLastUpdateAt: BigInt!

  " Address that conforms to a VowLike interface "
  potVowContract: Bytes!

  " Total savings in DAI of all users (Pot#Pie) "
  totalSavingsInPot: BigDecimal!

  #
  # DAI ERC20 contract address
  #

  " Total supply of ERC20.DAI "
  daiTotalSupply: BigDecimal!

  #
  #Liquidation 2.0 parameters (Dog)
  #

  " Amount of DAI needed to cover debt + fees of active auctions (Dog#Dirt) "
  totalDaiAmountToCoverDebtAndFees: BigDecimal!

  #
  # Status fields
  #

  " The latest block in which a system parameters was modified "
  block: BigInt!

  " The latest timestamp in which a system parameters was modified "
  timestamp: BigInt!

  " The latest transaction hash in which a system parameters was modified "
  transaction: Bytes!
}

type Auction @entity {
  " incrementing number. Equals to the String of the Flapper#ID "
  id: ID!

  " Bid amount in DAI "
  bidAmount: BigInt!

  " auction quantity up for sale (lot) "
  quantity: BigInt!

  " the highest auction bidder (guy) "
  highestBidder: Bytes!

  " TS when the auction ends "
  endTime: BigInt!

  " TS CreatedAt (kick time) "
  createdAt: BigInt!

  " TS modifiedAt "
  lastUpdate: BigInt!

  "False if Auction was deleted "
  active: Boolean!

  "Timestamp when the auction was deleted"
  deleteAt: BigInt!
}

" Maker Vault (formerly collateralized debt position or CDPs) "
type Vault @entity {
  " Equals to: <urn>-<ilk>"
  id: ID!

  " CDP ID if this vault was created through the manager (CdpManager) "
  cdpId: BigInt

  " Collateral type associated to this vault (ilk) "
  collateralType: CollateralType!

  " Assets locked as collateral (ink) "
  collateral: BigDecimal!

  " Outstanding debt (art) [DAI] "
  debt: BigDecimal!

  " Address of this vault's UrnHandler instance "
  handler: Bytes!

  " Address of vault's owner "
  owner: User!

  " Timestamp of the block in which this vault was opened [seconds] "
  openedAt: BigInt

  " Block number in which this vault was opened "
  openedAtBlock: BigInt

  " Transaction hash in which this vault was opened "
  openedAtTransaction: Bytes

  " Timestamp of the block in which this vault was last modified [seconds] "
  modifiedAt: BigInt

  " Block number in which this vault was last modified "
  modifiedAtBlock: BigInt

  " Transaction hash in which this vault was last modified "
  modifiedAtTransaction: Bytes

  " Vault action history "
  logs: [VaultLog!] @derivedFrom(field: "vault")
}

interface VaultLog {
  vault: Vault!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type VaultCreationLog implements VaultLog @entity {
  id: ID!
  vault: Vault!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type VaultCollateralChangeLog implements VaultLog @entity {
  id: ID!
  vault: Vault!
  collateralBefore: BigDecimal!
  collateralAfter: BigDecimal!
  collateralDiff: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type VaultDebtChangeLog implements VaultLog @entity {
  id: ID!
  vault: Vault!
  debtBefore: BigDecimal!
  debtAfter: BigDecimal!
  debtDiff: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type VaultSplitChangeLog
  @entity { # implements VaultLog @entity {
  id: ID!
  #vault: Vault!
  src: Bytes!
  dst: Bytes!
  collateralToMove: BigDecimal!
  debtToMove: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type VaultTransferChangeLog implements VaultLog @entity {
  id: ID!
  vault: Vault!
  previousOwner: User!
  nextOwner: User!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

interface CollateralLog {
  id: ID!
  collateral: Collateral!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type CollateralChangeLog implements CollateralLog @entity {
  id: ID!
  collateral: Collateral!
  collateralBefore: BigDecimal!
  collateralAfter: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

enum Direction {
  IN
  OUT
}

type CollateralTransferLog implements CollateralLog @entity {
  id: ID!
  src: Bytes!
  dst: Bytes!
  amount: BigDecimal!
  collateral: Collateral!
  direction: Direction!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type DaiMoveLog @entity {
  id: ID!
  src: Bytes!
  dst: Bytes!
  amount: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type MkrTransfer @entity {
  " Equals to: <src>-<dst>-<tx> "
  id: ID!
  src: User!
  dst: User!
  amount: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type MkrApproval @entity {
  " Equals to: <owner>-<spender> "
  id: ID!
  owner: User!
  spender: User!
  amount: BigDecimal!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type SpotParLog @entity {
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  transaction: Bytes!
  " Value of DAI in the reference asset (e.g. $1 per DAI) "
  par: BigInt!
}

type LiveChangeLog @entity {
  id: ID!
  contract: Bytes!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type CollateralPriceUpdateLog implements CollateralLog @entity {
  id: ID!
  collateral: Collateral!
  newValue: BigDecimal!
  newSpotPrice: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type PushDebtQueueLog @entity {
  id: ID!
  amount: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type PopDebtQueueLog @entity {
  id: ID!
  amount: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type VowFlapLog @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
  " bump "
  surplusAuctionLotSize: BigDecimal!
}

type VowFlopLog @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
  " address(this) "
  sourceContract: Bytes!
  " dump "
  debtAuctionLotSize: BigDecimal!
  " sump "
  debtAuctionBidSize: BigDecimal!
}

type DaiTransfer @entity {
  " Equals to: <transaction.hash>-<event.logindex>"
  id: ID!
  block: BigInt!
  transaction: Bytes!
  " timestamp of the transfer "
  timestamp: BigInt!
  " User of the sender "
  src: User!
  " User of the receiver "
  dst: User!
  " Amount of DAI transferred "
  amount: BigDecimal!
}

type DaiApproval @entity {
  id: ID!
  " User account sender "
  owner: User!
  " User account authorized to spend DAI "
  spender: User!
  " Amount of DAI approved "
  amount: BigDecimal!
  " Timestamp of the approval "
  createdAt: BigInt!
  " Timestamp of the update approval "
  updatedAt: BigInt!
}
